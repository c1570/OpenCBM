diff --git a/src/class/vendor/vendor_device.c b/src/class/vendor/vendor_device.c
index eec5a74ff..b57efd063 100644
--- a/src/class/vendor/vendor_device.c
+++ b/src/class/vendor/vendor_device.c
@@ -33,6 +33,11 @@
 
 #include "vendor_device.h"
 
+// XUM1541: Include RP2040 USB hardware access for PID reset
+#if CFG_TUSB_MCU == OPT_MCU_RP2040
+#include "portable/raspberrypi/rp2040/rp2040_usb.h"
+#endif
+
 //--------------------------------------------------------------------+
 // MACRO CONSTANT TYPEDEF
 //--------------------------------------------------------------------+
@@ -316,4 +321,32 @@ bool vendord_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint
   return true;
 }
 
+//--------------------------------------------------------------------+
+// XUM1541 Helper Functions
+//--------------------------------------------------------------------+
+
+void tud_vendor_reset_endpoint_pid(uint8_t ep_addr) {
+  #if CFG_TUSB_MCU == OPT_MCU_RP2040
+  //printf("[XUM1541-PID] Resetting endpoint 0x%02x PID to DATA0\n", ep_addr);
+  // Reset TinyUSB software state using existing DCD function
+  extern void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr);
+  dcd_edpt_clear_stall(0, ep_addr);  // This resets ep->next_pid = 0
+  // Reset hardware buffer control register to DATA0
+  uint8_t ep_num = tu_edpt_number(ep_addr);
+  uint8_t ep_dir = tu_edpt_dir(ep_addr);
+
+  volatile uint32_t* buf_ctrl;
+  if (ep_dir == TUSB_DIR_IN) {
+    buf_ctrl = &usb_dpram->ep_buf_ctrl[ep_num].in;
+  } else {
+    buf_ctrl = &usb_dpram->ep_buf_ctrl[ep_num].out;
+  }
+
+  uint32_t ctrl_val = *buf_ctrl;
+  ctrl_val &= ~USB_BUF_CTRL_DATA1_PID; // Clear DATA1
+  ctrl_val |= USB_BUF_CTRL_DATA0_PID;  // Set DATA0
+  *buf_ctrl = ctrl_val;
+  #endif
+}
+
 #endif
diff --git a/src/class/vendor/vendor_device.h b/src/class/vendor/vendor_device.h
index 149ae2d56..fc4091f80 100644
--- a/src/class/vendor/vendor_device.h
+++ b/src/class/vendor/vendor_device.h
@@ -128,6 +128,13 @@ TU_ATTR_WEAK void tud_vendor_tx_cb(uint8_t itf, uint32_t sent_bytes);
 //--------------------------------------------------------------------+
 
 
+//--------------------------------------------------------------------+
+// XUM1541 Helper Functions
+//--------------------------------------------------------------------+
+
+// XUM1541: Helper to reset a specific endpoint PID to DATA0 (for SET_INTERFACE)
+void tud_vendor_reset_endpoint_pid(uint8_t ep_addr);
+
 //--------------------------------------------------------------------+
 // Internal Class Driver API
 //--------------------------------------------------------------------+
