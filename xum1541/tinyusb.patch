diff --git a/src/portable/raspberrypi/rp2040/dcd_rp2040.c b/src/portable/raspberrypi/rp2040/dcd_rp2040.c
index 1386e5c73..3fa67068b 100644
--- a/src/portable/raspberrypi/rp2040/dcd_rp2040.c
+++ b/src/portable/raspberrypi/rp2040/dcd_rp2040.c
@@ -66,21 +66,22 @@ TU_ATTR_ALWAYS_INLINE static inline struct hw_endpoint* hw_endpoint_get_by_addr(
 }
 
 // XUM1541: Reset endpoint PID to DATA0
-void dcd_reset_endpoint_pid(uint8_t ep_addr) {
-  // Set hardware buffer control register to DATA0
+void dcd_reset_endpoint_pid(uint8_t ep_addr, uint8_t pid) {
+  // Set hardware buffer control register PID
   const uint8_t ep_num = tu_edpt_number(ep_addr);
   const uint8_t ep_dir = tu_edpt_dir(ep_addr);
   volatile uint32_t* buf_ctrl = (ep_dir == TUSB_DIR_IN) ?
       &usb_dpram->ep_buf_ctrl[ep_num].in : &usb_dpram->ep_buf_ctrl[ep_num].out;
   uint32_t ctrl_val = *buf_ctrl;
-  ctrl_val &= ~USB_BUF_CTRL_DATA1_PID;
-  ctrl_val |= USB_BUF_CTRL_DATA0_PID;
+  ctrl_val &= ~(USB_BUF_CTRL_DATA1_PID | USB_BUF_CTRL_DATA0_PID);
+  ctrl_val |= pid == 0 ? USB_BUF_CTRL_DATA0_PID : USB_BUF_CTRL_DATA1_PID;
   *buf_ctrl = ctrl_val;
 
-  // Set DCD internal next_pid to DATA1
+  // Set DCD internal next_pid and clear any stall
   struct hw_endpoint* ep = hw_endpoint_get_by_addr(ep_addr);
   if (ep) {
-    ep->next_pid = 1;
+    ep->next_pid = pid ^ 1;
+    _hw_endpoint_buffer_control_clear_mask32(ep, USB_BUF_CTRL_STALL);
   }
 }
 
